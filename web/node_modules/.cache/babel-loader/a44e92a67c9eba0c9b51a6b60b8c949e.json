{"ast":null,"code":"var _jsxFileName = \"/Users/abdul/Documents/belajar/react/se-prototype-ip/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloConsumer } from 'react-apollo';\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { gql } from '@apollo/client';\nimport { Query } from \"react-apollo\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'; //import Courses from './Courses'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 400,\n    margin: `${theme.spacing()}px auto`\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 2,\n    alignItems: \"center\"\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    height: 28,\n    margin: 4\n  },\n  paper: {\n    maxWidth: 400,\n    margin: `${theme.spacing()}px auto`,\n    padding: theme.spacing(2)\n  }\n}));\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/\"\n});\nexport const getSolrData = gql`\n      query Data($query: String){\n        responseHeader(row: \"7\", query: $query){\n          response{\n            numFound\n            docs{\n              articleid\n              content\n              title\n              datee\n            }\n          }\n        }\n      }\n      `;\nexport default function App() {\n  const [value, setValue] = React.useState();\n\n  const onSubmit = e => {\n    e.PreventDefault();\n    alert(value);\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    component: \"form\",\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputBase, {\n    className: classes.input,\n    placeholder: \"Solr Search\",\n    inputProps: {\n      \"aria-label\": \"search google maps\"\n    },\n    onChange: event => {\n      //adding the onChange event\n      setValue(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    type: \"submit\",\n    className: classes.iconButton,\n    \"aria-label\": \"search\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Query, {\n    query: getSolrData,\n    variables: {\n      query: value\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 27\n      }\n    }, \"Loading...\");\n    if (error) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, \"Error :(\");\n    return data.responseHeader.response.docs.map(({\n      articleid,\n      content,\n      title\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      key: articleid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      wrap: \"nowrap\",\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      noWrap: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, content))), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      wrap: \"nowrap\",\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      noWrap: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, title))))));\n  })));\n}\n;","map":{"version":3,"sources":["/Users/abdul/Documents/belajar/react/se-prototype-ip/src/App.js"],"names":["React","ApolloClient","ApolloProvider","ApolloConsumer","Paper","InputBase","IconButton","SearchIcon","makeStyles","gql","Query","Grid","Typography","useStyles","theme","root","padding","display","alignItems","width","margin","spacing","input","marginLeft","flex","iconButton","divider","height","paper","maxWidth","client","uri","getSolrData","App","value","setValue","useState","onSubmit","e","PreventDefault","alert","classes","event","target","query","loading","error","data","responseHeader","response","docs","map","articleid","content","title"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloConsumer } from 'react-apollo';\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { gql } from '@apollo/client';\nimport { Query } from \"react-apollo\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\n\n\n//import Courses from './Courses'\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 400,\n    margin: `${theme.spacing()}px auto`\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 2,\n    alignItems: \"center\"\n\n  },\n  iconButton: {\n    padding: 10\n  },\n  divider: {\n    height: 28,\n    margin: 4\n  },\n  paper: {\n    maxWidth: 400,\n    margin: `${theme.spacing()}px auto`,\n    padding: theme.spacing(2),\n  },\n}));\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/\"\n});\n\nexport const getSolrData = gql`\n      query Data($query: String){\n        responseHeader(row: \"7\", query: $query){\n          response{\n            numFound\n            docs{\n              articleid\n              content\n              title\n              datee\n            }\n          }\n        }\n      }\n      `;\n\nexport default function App() {\n  const [value, setValue] = React.useState()\n\n  const onSubmit =  e => {\n    e.PreventDefault();\n    alert(value)  \n  };\n\n  const classes = useStyles();\n\n  return (\n      <div>\n      <ApolloProvider client={client}>\n      <Paper component=\"form\" className={classes.root}>\n        <InputBase\n          className={classes.input}\n          placeholder=\"Solr Search\"\n          inputProps={{ \"aria-label\": \"search google maps\" }}\n          onChange={event=>{ //adding the onChange event\n            setValue(event.target.value)\n          }}\n          \n        />\n        <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\" onClick= {onSubmit} >\n          <SearchIcon />\n        </IconButton>\n    </Paper>\n    <Query query={getSolrData} variables={{ query: value }}>\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n      return data.responseHeader.response.docs.map(({ articleid, content, title }) => (\n        <div key={articleid}>\n            <Paper className={classes.paper}>\n            <Grid container wrap=\"nowrap\" spacing={2}>\n              <Grid item xs={12}>\n                <Typography noWrap>{content}</Typography>\n              </Grid>\n            </Grid>\n            <Grid container wrap=\"nowrap\" spacing={2}>\n              <Grid item xs={12}>\n                <Typography noWrap>{title}</Typography>\n              </Grid>\n            </Grid>\n          </Paper>\n        </div>\n      ));\n    }}\n\n    </Query>\n    </ApolloProvider>\n    </div>\n\n    \n  \n  \n)};"]},"metadata":{},"sourceType":"module"}